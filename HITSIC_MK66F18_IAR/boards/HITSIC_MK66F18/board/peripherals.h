/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_edma.h"
#include "fsl_dmamux.h"
#include "fsl_common.h"
#include "fsl_pit.h"
#include "fsl_uart.h"
#include "fsl_clock.h"
#include "fsl_vref.h"
#include "fsl_gpio.h"
#include "fsl_port.h"
#include "fsl_ftm.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for RTEPIP_BasicPip functional group */
/* Used DMA device. */
#define EDMA_DMA_BASEADDR DMA0
/* Associated DMAMUX device that is used for muxing of requests. */
#define EDMA_DMAMUX_BASEADDR DMAMUX
/* RTEPIP_BasicPip defines for PIT */
/* Definition of peripheral ID. */
#define PIT_PERIPHERAL PIT
/* Definition of clock source. */
#define PIT_CLOCK_SOURCE kCLOCK_BusClk
/* Definition of clock source frequency. */
#define PIT_CLK_FREQ CLOCK_GetFreq(PIT_CLOCK_SOURCE)
/* Definition of ticks count for channel 0. */
#define PIT_0_TICKS 4294967294U
/* Definition of ticks count for cahnnel 1. */
#define PIT_1_TICKS 4294967294U
/* Definition of ticks count for channel 2. */
#define PIT_2_TICKS USEC_TO_COUNT(1000U, PIT_CLK_FREQ) - 1U
/* PIT interrupt vector ID (number). */
#define PIT_2_IRQN PIT2_IRQn
/* PIT interrupt handler identifier. */
#define PIT_2_IRQHANDLER PIT2_IRQHandler
/* Definition of peripheral ID */
#define UART0_PERIPHERAL UART0
/* Definition of the clock source frequency */
#define UART0_CLOCK_SOURCE CLOCK_GetFreq(UART0_CLK_SRC)
/* Alias for VREF peripheral */
#define VREF_PERIPHERAL VREF
/* Alias for GPIOA peripheral */
#define GPIOA_GPIO GPIOA
/* Alias for PORTA */
#define GPIOA_PORT PORTA
/* GPIOA interrupt vector ID (number). */
#define GPIOA_IRQN PORTA_IRQn
/* GPIOA interrupt vector priority. */
#define GPIOA_IRQ_PRIORITY 6
/* GPIOA interrupt handler identifier. */
#define GPIOA_IRQHandler PORTA_IRQHandler
/* Alias for GPIOB peripheral */
#define GPIOB_GPIO GPIOB
/* Alias for PORTB */
#define GPIOB_PORT PORTB
/* GPIOB interrupt vector ID (number). */
#define GPIOB_IRQN PORTB_IRQn
/* GPIOB interrupt vector priority. */
#define GPIOB_IRQ_PRIORITY 6
/* GPIOB interrupt handler identifier. */
#define GPIOB_IRQHandler PORTB_IRQHandler
/* Alias for GPIOC peripheral */
#define GPIOC_GPIO GPIOC
/* Alias for PORTC */
#define GPIOC_PORT PORTC
/* GPIOC interrupt vector ID (number). */
#define GPIOC_IRQN PORTC_IRQn
/* GPIOC interrupt vector priority. */
#define GPIOC_IRQ_PRIORITY 6
/* GPIOC interrupt handler identifier. */
#define GPIOC_IRQHandler PORTC_IRQHandler
/* Alias for GPIOD peripheral */
#define GPIOD_GPIO GPIOD
/* Alias for PORTD */
#define GPIOD_PORT PORTD
/* GPIOD interrupt vector ID (number). */
#define GPIOD_IRQN PORTD_IRQn
/* GPIOD interrupt vector priority. */
#define GPIOD_IRQ_PRIORITY 6
/* GPIOD interrupt handler identifier. */
#define GPIOD_IRQHandler PORTD_IRQHandler
/* Alias for GPIOE peripheral */
#define GPIOE_GPIO GPIOE
/* Alias for PORTE */
#define GPIOE_PORT PORTE
/* GPIOE interrupt vector ID (number). */
#define GPIOE_IRQN PORTE_IRQn
/* GPIOE interrupt vector priority. */
#define GPIOE_IRQ_PRIORITY 6
/* GPIOE interrupt handler identifier. */
#define GPIOE_IRQHandler PORTE_IRQHandler

/* Definitions for RTEPIP_Digital functional group */
/* Definition of peripheral ID */
#define FTM0_PERIPHERAL FTM0
/* Definition of the clock source frequency */
#define FTM0_CLOCK_SOURCE CLOCK_GetFreq(kCLOCK_BusClk)
/* FTM0 interrupt vector ID (number). */
#define FTM0_IRQN FTM0_IRQn
/* FTM0 interrupt handler identifier. */
#define FTM0_IRQHANDLER FTM0_IRQHandler
/* Definition of peripheral ID */
#define FTM1_PERIPHERAL FTM1
/* Definition of the clock source frequency */
#define FTM1_CLOCK_SOURCE CLOCK_GetFreq(kCLOCK_BusClk)
/* FTM1 interrupt vector ID (number). */
#define FTM1_IRQN FTM1_IRQn
/* FTM1 interrupt handler identifier. */
#define FTM1_IRQHANDLER FTM1_IRQHandler
/* Definition of peripheral ID */
#define FTM2_PERIPHERAL FTM2
/* Definition of the clock source frequency */
#define FTM2_CLOCK_SOURCE CLOCK_GetFreq(kCLOCK_BusClk)
/* FTM2 interrupt vector ID (number). */
#define FTM2_IRQN FTM2_IRQn
/* FTM2 interrupt handler identifier. */
#define FTM2_IRQHANDLER FTM2_IRQHandler
/* Definition of peripheral ID */
#define FTM3_PERIPHERAL FTM3
/* Definition of the clock source frequency */
#define FTM3_CLOCK_SOURCE CLOCK_GetFreq(kCLOCK_BusClk)
/* FTM3 interrupt vector ID (number). */
#define FTM3_IRQN FTM3_IRQn
/* FTM3 interrupt handler identifier. */
#define FTM3_IRQHANDLER FTM3_IRQHandler

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern const edma_config_t EDMA_config;
extern const pit_config_t PIT_config;
extern const uart_config_t UART0_config;
extern const vref_config_t VREF_config;
extern const ftm_config_t FTM0_config;
extern const ftm_config_t FTM1_config;
extern const ftm_config_t FTM2_config;
extern const ftm_config_t FTM3_config;

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/
void RTEPIP_BasicPip(void);
void RTEPIP_Digital(void);
void RTEPIP_ANALOG(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
